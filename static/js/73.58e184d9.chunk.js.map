{"version":3,"file":"static/js/73.58e184d9.chunk.js","mappings":"mNAgEA,QA3DA,WACE,MAAMA,GAAeC,EAAAA,EAAAA,IAAYC,EAAAA,IAEjC,OACEC,EAAAA,EAAAA,KAAA,QAAAC,UACEC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,YAAWF,SAAA,EACxBD,EAAAA,EAAAA,KAAA,MAAII,MAAO,CAAEC,SAAU,QAASJ,SAAC,4BACjCD,EAAAA,EAAAA,KAAA,MAAII,MAAO,CAAEE,QAAS,OAAQC,SAAU,OAAQC,IAAK,QAASP,SAC3DJ,EAAaY,OAAS,EACrBZ,EAAaa,KAAIC,IACfT,EAAAA,EAAAA,MAAA,MACEU,KAAMD,EAENP,MAAO,CACLS,aAAc,MACdC,OAAQ,oBACRC,QAAS,OACTC,UAAW,QACXf,SAAA,EAEFD,EAAAA,EAAAA,KAAA,KAAAC,SAAG,iBACHD,EAAAA,EAAAA,KAAA,MAAAC,SACGU,EAAKM,UAAUP,KAAI,CAACE,EAAMM,KACzBhB,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACEC,EAAAA,EAAAA,MAAA,KACEE,MAAO,CACLE,QAAS,gBACTL,SAAA,CAEDiB,EAAQ,EAAE,QAEbhB,EAAAA,EAAAA,MAAA,KACEE,MAAO,CACLE,QAAS,gBACTL,SAAA,CACH,SACQW,EAAKO,aAEdjB,EAAAA,EAAAA,MAAA,KAAAD,SAAA,CAAG,UAAQW,EAAKQ,UAChBlB,EAAAA,EAAAA,MAAA,KAAAD,SAAA,CAAG,UAAQW,EAAKS,YAhBTC,EAAAA,EAAAA,YAoBbpB,EAAAA,EAAAA,MAAA,KAAAD,SAAA,CAAG,gBAAcU,EAAKY,eACtBrB,EAAAA,EAAAA,MAAA,KAAAD,SAAA,CAAG,SAAOU,EAAKa,UAAUC,MAAM,EAAG,UAhC7BH,EAAAA,EAAAA,UAoCTpB,EAAAA,EAAAA,MAAAwB,EAAAA,SAAA,CAAAzB,SAAA,EACED,EAAAA,EAAAA,KAAA,KAAAC,SAAG,oCACHD,EAAAA,EAAAA,KAAC2B,EAAAA,GAAI,CAACC,GAAG,IAAG3B,SAAC,8BAO3B,C,kCC5DO,IAkBIqB,EAAS,WAAe,IAAdO,EAAIC,UAAArB,OAAA,QAAAsB,IAAAD,UAAA,GAAAA,UAAA,GAAG,GACtBE,EAAK,GACLC,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWP,IAClD,KAAOA,KACLG,GCvBF,mEDuBkC,GAAdC,EAAMJ,IAE1B,OAAOG,CACT,C","sources":["pages/HistoryPage/index.jsx","../node_modules/nanoid/index.browser.js","../node_modules/nanoid/url-alphabet/index.js"],"sourcesContent":["import { nanoid } from 'nanoid';\nimport { useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { selectCartsHistory } from '../../redux/shopsSelectors';\n\nfunction HistoryPage() {\n  const historyArray = useSelector(selectCartsHistory);\n\n  return (\n    <main>\n      <div className=\"container\">\n        <h1 style={{ fontSize: '26px' }}>Your history of carts:</h1>\n        <ul style={{ display: 'flex', flexWrap: 'wrap', gap: '10px' }}>\n          {historyArray.length > 0 ? (\n            historyArray.map(item => (\n              <li\n                drug={item}\n                key={nanoid()}\n                style={{\n                  borderRadius: '8px',\n                  border: '1px solid #262f34',\n                  padding: '10px',\n                  marginTop: '20px',\n                }}\n              >\n                <p>DrugsList: </p>\n                <ul>\n                  {item.drugsList.map((drug, index) => (\n                    <li key={nanoid()}>\n                      <p\n                        style={{\n                          display: 'inline-block',\n                        }}\n                      >\n                        {index + 1}.\n                      </p>\n                      <p\n                        style={{\n                          display: 'inline-block',\n                        }}\n                      >\n                        name: {drug.drugName}\n                      </p>\n                      <p>price: {drug.price}</p>\n                      <p>total: {drug.total}</p>\n                    </li>\n                  ))}\n                </ul>\n                <p>Total Price: {item.totalPrice}</p>\n                <p>Date: {item.createdAt.slice(0, 10)}</p>\n              </li>\n            ))\n          ) : (\n            <>\n              <p>Your history is still empty...</p>\n              <Link to=\"/\">Back to shopping</Link>\n            </>\n          )}\n        </ul>\n      </div>\n    </main>\n  );\n}\n\nexport default HistoryPage;\n","import { urlAlphabet } from './url-alphabet/index.js'\nexport { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    id += urlAlphabet[bytes[size] & 63]\n  }\n  return id\n}\n","export const urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\n"],"names":["historyArray","useSelector","selectCartsHistory","_jsx","children","_jsxs","className","style","fontSize","display","flexWrap","gap","length","map","item","drug","borderRadius","border","padding","marginTop","drugsList","index","drugName","price","total","nanoid","totalPrice","createdAt","slice","_Fragment","Link","to","size","arguments","undefined","id","bytes","crypto","getRandomValues","Uint8Array"],"sourceRoot":""}